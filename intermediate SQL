/*
INNER JOIN, FULL/LEFT/RIGHT OUTER JOINS
*/

SELECT * FROM EmployeeDemographics AS A
INNER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID --HERE WE ARE ONLY LOOKING AT THIGNS WHICH ARE SIMILAR BETWEEN BOTH THE TABLES BASED ON EMPLOYiD

SELECT * FROM EmployeeDemographics AS A
FULL OUTER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 

SELECT * FROM EmployeeDemographics AS A
LEFT JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID --it says we want everything from the left table and everything that is overlapping. 
--If an empID is only in right table we do not want it

SELECT * FROM EmployeeDemographics AS A
RIGHT JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 

SELECT A.EmployeeID, FirstName, LastName, JobTitle, Salary FROM EmployeeDemographics AS A
INNER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 

SELECT B.EmployeeID, FirstName, LastName, JobTitle, Salary FROM EmployeeDemographics AS A
RIGHT OUTER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 

--USECASE #1: WHERE MICHAEL WANTS TO DEDUCT THE SALARY OF THE HIGHEST PAID EMPLOYEE IN THE COMPANY WHICH IS NOT HIM
SELECT  A.EmployeeID, FirstName, LastName, Salary
FROM EmployeeDemographics AS A
INNER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 
WHERE FirstName<> 'Michael'
Order by Salary DESC

--USECASE #2: THE SALARY OF SALESMAN HAS NOT BEEN ASSIGNED PROPERLY SO NEED TO FUND THE AVERAGE SALARY OF THE SALESMAN
SELECT  JobTitle, Salary
FROM EmployeeDemographics AS A
INNER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 
WHERE JobTitle= 'Salesman'

SELECT  JobTitle, avg(salary)
FROM EmployeeDemographics AS A
INNER JOIN EmployeeSalary AS B
ON A.EmployeeID = B.EmployeeID 
WHERE JobTitle= 'Salesman'
group by JobTitle

/*
Union, Union All
*/

SELECT  *
FROM EmployeeDemographics AS A
FULL OUTER JOIN warehouseemployeedemographics AS B
ON A.EmployeeID = B.EmployeeID 

SELECT * FROM EmployeeDemographics
UNION
SELECT * FROM WAREHOUSEEMPLOYEEDEMOGRAPHICS 
---SELECTS EVERYTHING FORM BOTH THE TABLES IN COMMON COLOUMNS..IT ALSO GETS RID OF DUPLICATION IN THE TABLES

--UNION ALL WILL SELECT EVERYTHING REGARDLESS IT IS A DUPLICATE OR NOT
SELECT * FROM EmployeeDemographics
UNION ALL
SELECT * FROM WAREHOUSEEMPLOYEEDEMOGRAPHICS 
ORDER BY EmployeeID --SHOWS DUPLICATION OF Darryl Philbin

/*
Today's Topic: Case Statement
*/
USE SQLTutorial
SELECT FIRSTNAME, LASTNAME, AGE FROM EMPLOYEEDEMOGRAPHICS
WHERE AGE IS NOT NULL
ORDER BY AGE

SELECT FIRSTNAME, LASTNAME, AGE, 
CASE

WHEN AGE > 30 THEN 'OLD'
WHEN AGE BETWEEN 27 AND 30 THEN 'YOUNG'
ELSE 'BABY'
END

FROM EMPLOYEEDEMOGRAPHICS
WHERE AGE IS NOT NULL
ORDER BY AGE

--CASE # THERE'S A SALARY HIKE.. WILL GIVE WHAT THIER SALARY WILL BE AFTER THE HIKE
USE SQLTutorial
SELECT FIRSTNAME, LASTNAME, JOBTITLE, SALARY,
CASE
WHEN JOBTITLE = 'SALESMAN' THEN SALARY + (SALARY * .10)
WHEN JOBTITLE = 'ACCOUNTANT' THEN SALARY + (SALARY * .05)
WHEN JOBTITLE = 'HR' THEN SALARY + (SALARY * .00001)
ELSE SALARY + (SALARY * .03)
END AS SalaryAfterRaise
FROM EmployeeDemographics AS A 
INNER JOIN EMPLOYEESALARY AS B
ON A.EMPLOYEEid = B.EMPLOYEEID
